from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import keybord
from Const import *


# Initialize bot and dispatcher
class FSMQuestion(StatesGroup):
    text = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(state=FSMQuestion.text, content_types=['photo', 'text'])
async def newquestion(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.content_type == 'photo':
            data['text'] = message.caption
        else:
            data['text'] = message.text
    await state.finish()
    if message.chat.username is None:
        who = "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        who = "@" + message.chat.username
    if message.content_type == 'photo':
        ph = message.photo[0].file_id
        await message.reply(f"{cfg['question_ur_question_sended_message']}",
                            parse_mode='Markdown')
        await bot.send_photo(cfg['teh_chat_id'], ph,
                             caption=f"‚úâ | –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n–í—ñ–¥: {who}\n–ü–∏—Ç–∞–Ω–Ω—è: {data['text']}\n\nüìù –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ "
                                     f"–Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å /–≤—ñ–¥–ø–æ–≤—ñ–¥—å {message.chat.id} –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                             parse_mode='Markdown')
    else:
        await message.reply(f"{cfg['question_ur_question_sended_message']}",
                            parse_mode='Markdown')
        await bot.send_message(cfg['teh_chat_id'],
                               f"‚úâ | –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n–í—ñ–¥: {who}\n–ü–∏—Ç–∞–Ω–Ω—è: {data['text']}\n\nüìù –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ "
                                     f"–Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å /–≤—ñ–¥–ø–æ–≤—ñ–¥—å {message.chat.id} –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                               parse_mode='Markdown')


def analytics(func: callable):
    total_messages = 0
    users = set()
    total_users = 0

    def analytics_wrapper(message):
        nonlocal total_messages, total_users
        total_messages += 1

        if message.chat.id not in users:
            users.add(message.chat.id)
            total_users += 1
        data = [
            (
                total_users, message.text, total_messages
            )
        ]
        cur.executemany("INSERT INTO analytics VALUES(?, ?, ?)", data)
        con.commit()
        return func(message)

    return analytics_wrapper


@dp.message_handler(commands=['start'])
@analytics
async def hello(message: aiogram.types.Message):
    await message.answer(cfg['welcome_message'],
                         reply_markup=keybord.keyboard_menu)


@dp.message_handler(commands=['getchatid'])
async def client_getgroupid(message: aiogram.types.Message):
    try:
        await message.answer(f"Chat id is: *{message.chat.id}*\nYour id is: *{message.from_user.id}*",
                             parse_mode='Markdown')
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}",
                             parse_mode='Markdown')
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}",
                               parse_mode='Markdown')


@dp.message_handler(commands=['–≤—ñ–¥–ø–æ–≤—ñ–¥—å'])
async def admin_ot(message: aiogram.types.Message):
    try:
        args = extract_arg(message.text)
        if len(args) >= 2:
            chatid = str(args[0])
            args.pop(0)
            answer = ""
            for ot in args:
                answer += ot + " "
            await message.reply('‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!')
            await bot.send_message(chatid, f"‚úâ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{answer}",
                                   parse_mode='Markdown')
            return
        else:
            await message.reply('‚ö† –í–∫–∞–∂—ñ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏\n–ü—Ä–∏–∫–ª–∞–¥: /–≤—ñ–¥–ø–æ–≤—ñ–¥—å 516712732 –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å',
                                parse_mode='Markdown')
            return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}",
                             parse_mode='Markdown')
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}",
                               parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
@analytics
async def answer_to_the_question(message: aiogram.types.Message):
    try:
        if message.text == cfg['button_new_question']:
            await message.answer(f"{cfg['question_type_ur_question_message']}")
            await FSMQuestion.text.set()
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}",
                             parse_mode='Markdown')
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}",
                               parse_mode='Markdown')
    if message.text == '–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å...', reply_markup=keybord.mfaq)
    elif message.text == '–§—ñ–Ω–∞–Ω—Å–∏':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤...', reply_markup=keybord.finansy)
    elif message.text == '–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –Ω–∞–≤—á–∞–Ω–Ω—è...', reply_markup=keybord.regarding_training)
    elif message.text == '–ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–∏–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó...', reply_markup=keybord.admissions)


def extract_arg(arg):
    return arg.split()[1:]


@dp.callback_query_handler(lambda c: c.data == 'Specialty_FMKT')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute(
            "SELECT reply  FROM reply WHERE question = '–ó–∞ —è–∫–∏–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞–±—ñ—Ä?'"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'the_cost_of_the_hostel')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute(
            "SELECT reply  FROM reply WHERE question = '–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É 2022/2023 –Ω.—Ä. '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–Ø–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤—Å—Ç—É–ø—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–£–º–æ–≤–∏ –≤—Å—Ç—É–ø—É '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'terms_of_study')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–¢–µ—Ä–º—ñ–Ω–∏ –Ω–∞–≤—á–∞–Ω–Ω—è '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'tuition_fee')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply FROM reply WHERE question = '–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è (–¥–µ–Ω–Ω–∞/–∑–∞–æ—á–Ω–∞) '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'faculty_dormitory')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'renewal')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ü–æ–Ω–æ–≤–ª–µ–Ω–Ω—è'"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'deduction')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–í—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—è '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'email')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'time')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ß–∞—Å —Ä–æ–±–æ—Ç–∏ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'location')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'academic_certificate')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ê–∫–∞–¥–µ–º—ñ—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'student_id')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –∫–≤–∏—Ç–æ–∫ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'where_are_the_documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute(
            "SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –æ—Ä–∏–≥—ñ–Ω–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ —è–∫–∏—Ö –í–∏ –≤—Å—Ç—É–ø–∞–ª–∏ –¥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'wocftc')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute(
            "SELECT reply  FROM reply WHERE question = '–î–µ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–æ–≤—ñ–¥–∫—É —É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–¢–¶–ö —Ç–∞ –°–ü, –≤—ñ–π—Å—å–∫–∫–æ–º–∞—Ç), —Ñ–æ—Ä–º–∞ 20 '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'wahtoac')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ —ñ —è–∫ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–æ–≤—ñ–¥–∫—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'wFMKTdo')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–µ–∫–∞–Ω–∞—Ç –§–∞–∫—É–ª—å—Ç–µ—Ç—É –ú–ö–¢? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


@dp.callback_query_handler(lambda c: c.data == 'parents_must_be_present')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–µ–∫–∞–Ω–∞—Ç –§–∞–∫—É–ª—å—Ç–µ—Ç—É –ú–ö–¢? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"–Ø–∫—â–æ –≤—Å—Ç—É–ø–Ω–∏–∫—É –Ω–µ–º–∞—î 18 —Ç–∞–∫")


if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
