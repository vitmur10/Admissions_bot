import aiogram
import sqlite3
import keybord
from Const import TOKEN

# Initialize bot and dispatcher
bot = aiogram.Bot(token=TOKEN)
dp = aiogram.Dispatcher(bot)

con = sqlite3.connect("bd")
cur = con.cursor()


def analytics(func: callable):
    total_messages = 0
    users =set()
    total_users = 0

    def analytics_wrapper(message):
            nonlocal total_messages, total_users
            total_messages +=1

            if message.chat.id not in users:
                users.add(message.chat.id)
                total_users += 1
            data = [
                (
                    total_users, message.text, total_messages
                 )
            ]
            cur.executemany("INSERT INTO analytics VALUES(?, ?, ?)", data)
            con.commit()
            return func(message)

    return analytics_wrapper


@dp.message_handler(commands=['start'])
@analytics
async def hello(message: aiogram.types.Message):
    await message.answer("–í—ñ—Ç–∞—é, –º–∞–π–±—É—Ç–Ω—ñ–π –≤—Å—Ç—É–ø–Ω–∏–∫—É –ö–ù–£–¢–î‚ùóÔ∏èüßë‚Äçüéì\n"
                         "–í—Å—Ç—É–ø –Ω–∞ 1 –∫—É—Ä—Å –∑–∞–≤–∂–¥–∏ —Ç—Ä–∏–≤–æ–∂–Ω–∏–πüìö\n"
                         "–Ü —â–æ–± –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–º –≤ –æ–±—Ä–∞–Ω–æ–º—É —à–ª—è—Ö—É, –∑–∞–≤–∂–¥–∏ –≤–∏–Ω–∏–∫–∞—î –±–µ–∑–ª—ñ—á –∑–∞–ø–∏—Ç–∞–Ω—åüí≠\n"
                         "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—èüîç\n"
                         "\n"
                         "P.S. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞ —è–∫—ñ –Ω–µ –∑–Ω–∞–π–¥–µ—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ —Å—é–¥–∏üëáüèª", reply_markup=keybord.keyboard_menu)


@dp.message_handler(content_types=['text'])
@analytics
async def answer_to_the_question(message: aiogram.types.Message):
    if message.text == '–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å...', reply_markup=keybord.mfaq)
    elif message.text == '–§—ñ–Ω–∞–Ω—Å–∏':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤...', reply_markup=keybord.finansy)
    elif message.text == '–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –Ω–∞–≤—á–∞–Ω–Ω—è...', reply_markup=keybord.regarding_training)
    elif message.text == '–ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–∏–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó...', reply_markup=keybord.admissions)


@dp.callback_query_handler(lambda c: c.data == 'Specialty_FMKT')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ó–∞ —è–∫–∏–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞–±—ñ—Ä?'"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'the_cost_of_the_hostel')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É 2022/2023 –Ω.—Ä. '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–Ø–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤—Å—Ç—É–ø—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–£–º–æ–≤–∏ –≤—Å—Ç—É–ø—É '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'terms_of_study')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–¢–µ—Ä–º—ñ–Ω–∏ –Ω–∞–≤—á–∞–Ω–Ω—è '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'tuition_fee')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply FROM reply WHERE question = '–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è (–¥–µ–Ω–Ω–∞/–∑–∞–æ—á–Ω–∞) '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'faculty_dormitory')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'renewal')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ü–æ–Ω–æ–≤–ª–µ–Ω–Ω—è'"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'deduction')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–í—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—è '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'email')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'time')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ß–∞—Å —Ä–æ–±–æ—Ç–∏ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")



@dp.callback_query_handler(lambda c: c.data == 'location')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'academic_certificate')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–ê–∫–∞–¥–µ–º—ñ—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")



@dp.callback_query_handler(lambda c: c.data == 'student_id')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –∫–≤–∏—Ç–æ–∫ '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")



@dp.callback_query_handler(lambda c: c.data == 'where_are_the_documents')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –æ—Ä–∏–≥—ñ–Ω–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ —è–∫–∏—Ö –í–∏ –≤—Å—Ç—É–ø–∞–ª–∏ –¥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'wocftc')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–æ–≤—ñ–¥–∫—É —É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–¢–¶–ö —Ç–∞ –°–ü, –≤—ñ–π—Å—å–∫–∫–æ–º–∞—Ç), —Ñ–æ—Ä–º–∞ 20 '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'wahtoac')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ —ñ —è–∫ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–æ–≤—ñ–¥–∫—É? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")


@dp.callback_query_handler(lambda c: c.data == 'wFMKTdo')
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT reply  FROM reply WHERE question = '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–µ–∫–∞–Ω–∞—Ç –§–∞–∫—É–ª—å—Ç–µ—Ç—É –ú–ö–¢? '"):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{reply}")

if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
