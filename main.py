from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import keybord
from Const import *


# Initialize bot and dispatcher
class FSMQuestion(StatesGroup):
    text = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(state=FSMQuestion.text, content_types=['photo', 'text'])
async def newquestion(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.content_type == 'photo':
            data['text'] = message.caption
        else:
            data['text'] = message.text
    await state.finish()
    if message.chat.username is None:
        who = "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        who = "@" + message.chat.username
    if message.content_type == 'photo':
        ph = message.photo[0].file_id
        await message.reply(f"{cfg['question_ur_question_sended_message']}")
        await bot.send_photo(cfg['teh_chat_id'], ph,
                             caption=f"‚úâ | –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n–í—ñ–¥: {who}\n–ü–∏—Ç–∞–Ω–Ω—è: {data['text']}\n\nüìù –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ "
                                     f"–Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å ")
        await bot.send_message(cfg['teh_chat_id'], f"/–≤—ñ–¥–ø–æ–≤—ñ–¥—å {message.chat.id} –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
    else:
        await message.reply(f"{cfg['question_ur_question_sended_message']}")
        await bot.send_message(cfg['teh_chat_id'],
                               f"‚úâ | –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n–í—ñ–¥: {who}\n–ü–∏—Ç–∞–Ω–Ω—è: {data['text']}\n\nüìù –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ ")
        await bot.send_message(cfg['teh_chat_id'],f"/–≤—ñ–¥–ø–æ–≤—ñ–¥—å {message.chat.id} –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")


@dp.message_handler(commands=['start'])
async def hello(message: aiogram.types.Message):
    await message.answer(cfg['welcome_message'],
                         reply_markup=keybord.keyboard_menu)


@dp.message_handler(commands=['getchatid'])
async def client_getgroupid(message: aiogram.types.Message):
    try:
        await message.answer(f"Chat id is: *{message.chat.id}*\nYour id is: *{message.from_user.id}*")
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}")
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}")


@dp.message_handler(commands=['–≤—ñ–¥–ø–æ–≤—ñ–¥—å'])
async def admin_ot(message: aiogram.types.Message):
    try:
        args = extract_arg(message.text)
        if len(args) >= 2:
            chatid = str(args[0])
            args.pop(0)
            answer = ""
            for ot in args:
                answer += ot + " "
            await message.reply('‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!')
            await bot.send_message(chatid, f"‚úâ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{answer}")
            return
        else:
            await message.reply('‚ö† –í–∫–∞–∂—ñ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏\n–ü—Ä–∏–∫–ª–∞–¥:')
            await bot.send_message(cfg['teh_chat_id'], f"/–≤—ñ–¥–ø–æ–≤—ñ–¥—å {message.chat.id} –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
            return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}")
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}")


@dp.message_handler(content_types=['text'])
async def answer_to_the_question(message: aiogram.types.Message):
    try:
        if message.text == cfg['button_new_question']:
            await message.answer(f"{cfg['question_type_ur_question_message']}")
            await FSMQuestion.text.set()
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{cfg['error_message']}")
        await bot.send_message(cfg['teh_chat_id'], f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —á–∞—Ç—ñ {cid}\n–°—Ç–∞—Ç—É—Å –ø–æ–º–∏–ª–∫–∏: {e}")
    if message.text == '–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å...', reply_markup=keybord.create_inline_keyboard(message.text))
    elif message.text == '–§—ñ–Ω–∞–Ω—Å–∏':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤...',
                             reply_markup=keybord.create_inline_keyboard(message.text))
    elif message.text == '–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –Ω–∞–≤—á–∞–Ω–Ω—è...',
                             reply_markup=keybord.create_inline_keyboard(message.text))
    elif message.text == '–ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è':
        await message.answer('–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –ø–∏—Ç–∞–Ω—å —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–∏–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó...',
                             reply_markup=keybord.create_inline_keyboard(message.text))


def extract_arg(arg):
    return arg.split()[1:]


@dp.callback_query_handler(lambda c: True)
async def independence_square(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for reply in cur.execute("SELECT answer  FROM question_answer_Question WHERE text = ?", (callback_query.data,)):
        await bot.send_message(callback_query.from_user.id, f"–û—Å—å —â–æ –º–µ–Ω—ñ –≤—ñ–¥–æ–º–æ\n"
                                                            f"{q}\n"
                                                            f"{reply[0]}")


if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
